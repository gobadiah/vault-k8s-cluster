#!/bin/zsh

set -e

color=blue

print -nP "%F{$color}"

print -P "%F{orange}Cleaning previous certificates ...%F{$color}"
rm *.pem *.csr || true

print -P "%F{orange}Removing previous k8s elements if present ...%F{$color}"
kubectl delete secret consul 2>&1 >/dev/null || true
kubectl delete secret vaulttls 2>&1 >/dev/null || true
kubectl delete configmap consul 2>&1 >/dev/null || true
kubectl delete service consul 2>&1 >/dev/null || true
kubectl delete service vault 2>&1 >/dev/null || true
kubectl delete statefulset consul 2>&1 >/dev/null || true

print -nP "Generate root CA"
print -P  "%f"

cfssl gencert -initca ca/ca-csr.json | cfssljson -bare ca

cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca/ca-config.json \
  -profile=default \
  ca/consul-csr.json | cfssljson -bare consul

cfssl gencert \
  -ca=ca.pem \
  -ca-key=ca-key.pem \
  -config=ca/ca-config.json \
  -profile=default \
  ca/vault-csr.json | cfssljson -bare vault

GOSSIP_ENCRYPTION_KEY=$(consul keygen)

print -P "Generated a gossip encryption key and creating consul secret. "
print -P "Using provided certificates (privkey.pem and fullchain.pem from let's encrypt)."
kubectl create secret generic consul \
  --from-literal="gossip-encryption-key=${GOSSIP_ENCRYPTION_KEY}" \
  --from-file=ca.pem \
  --from-file=consul.pem \
  --from-file=consul-key.pem

print -nP "Creating consul configmap from %F{yellow}configs/consul.json%F{$color} config file... "
kubectl create configmap consul --from-file=configs/consul.json 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

print -nP "Creating consul service from %F{yellow}services/consul.yaml%F{$color} file... "
kubectl create -f services/consul.yaml 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

print -nP "Creating consul statefulset from %F{yellow}statefulsets/consul.yaml%F{$color} config file... "
kubectl create -f statefulsets/consul.yaml 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

print -nP "Waiting for consul cluster to elect a leader... "
until kubectl logs consul-0 2>/dev/null | grep -q "New leader elected"
do
  sleep 5
done
print -P "%F{green}done.%F{$color}"

kubectl port-forward consul-0 8500:8500 &

sleep 10 # For port-forwarding to setup

print -P "Boostrapping consul cluster..."
ACL_MASTER_TOKEN=$(curl --request PUT http://127.0.0.1:8500/v1/acl/bootstrap | jq -r '.ID')
print -P "%F{yellow}ACL_MASTER_TOKEN%F{$color}=%F{magenta}$ACL_MASTER_TOKEN%F{$color}"

ACL_AGENT_TOKEN=$(curl \
  --request PUT \
  --header "X-Consul-Token: $ACL_MASTER_TOKEN" \
  --data @acls/agent.json \
  http://127.0.0.1:8500/v1/acl/create | jq -r '.ID')
print -P "%F{yellow}ACL_AGENT_TOKEN%F{$color}=%F{magenta}$ACL_AGENT_TOKEN%F{$color}"

print -P "Setting acl_agent_token from previously created ACL_AGENT_TOKEN ..."
curl \
  --request PUT \
  --header "X-Consul-Token: $ACL_MASTER_TOKEN" \
  --data "{ \"Token\": \"$ACL_AGENT_TOKEN\" }" \
  http://127.0.0.1:8500/v1/agent/token/acl_agent_token

print -P "Creating vault consul token with %F{yellow}acls/vault.json%F{$color}."
VAULT_CONSUL_TOKEN=$(curl \
  --request PUT \
  --header "X-Consul-Token: $ACL_MASTER_TOKEN" \
  --data @acls/vault.json \
  http://127.0.0.1:8500/v1/acl/create | jq -r '.ID')
print -P "%F{yellow}VAULT_CONSUL_TOKEN%F{$color}=%F{magenta}$VAULT_CONSUL_TOKEN%F{$color}"
kubectl create secret generic vault-consul-key --from-literal="consul-key=$VAULT_CONSUL_TOKEN"

kill $!

kubectl port-forward consul-1 8500:8500 &

sleep 10

print -P "Setting acl_agent_token from previously created ACL_AGENT_TOKEN ..."
curl \
  --request PUT \
  --header "X-Consul-Token: $ACL_MASTER_TOKEN" \
  --data "{ \"Token\": \"$ACL_AGENT_TOKEN\" }" \
  http://127.0.0.1:8500/v1/agent/token/acl_agent_token

kill $!

kubectl port-forward consul-2 8500:8500 &

sleep 10

print -P "Setting acl_agent_token from previously created ACL_AGENT_TOKEN ..."
curl \
  --request PUT \
  --header "X-Consul-Token: $ACL_MASTER_TOKEN" \
  --data "{ \"Token\": \"$ACL_AGENT_TOKEN\" }" \
  http://127.0.0.1:8500/v1/agent/token/acl_agent_token

print -P "Updating anonymous token acl"
curl \
  --request PUT \
  --header "X-Consul-Token: $ACL_MASTER_TOKEN" \
  --data @acls/anonymous.json \
  http://127.0.0.1:8500/v1/acl/create

print -P "Using provided certificates (privkey.pem and fullchain.pem from let's encrypt)."

kill $!

cp vault.pem vault.pem.bak
cat vault.pem.bak ca.pem > vault.pem
kubectl create secret generic vault \
  --from-file=vault.pem \
  --from-file=vault-key.pem

print -P "Using ACL_AGENT_TOKEN to create consul-agent-token secret."
echo "{ \"acl_agent_token\": \"$ACL_AGENT_TOKEN\" }" > acl_agent_token.json
kubectl create secret generic consul-agent-token --from-file=acl_agent_token.json

print -nP "Creating vault service from %F{yellow}services/vault.yaml%F{$color} file... "
kubectl apply -f services/vault.yaml 2>&1 >/dev/null
print -P "%F{green}done.%F{$color}"

kubectl apply -f statefulsets/vault.yaml

print -nP "Waiting for first vault node to be ready... "
until kubectl logs vault-0 vault 2>/dev/null | grep -q "Log data will stream in below"
do
  sleep 5
done
print -P "%F{green}done.%F{$color}"

kubectl port-forward vault-0 8200:8200 &

sleep 10

vault operator init -key-shares=1 -key-threshold=1 -tls-skip-verify 1>stdout 2>stderr

UNSEAL_KEY=$(cat stdout | grep "Unseal Key" | sed -E 's/Unseal Key 1: (.*)/\1/')

VAULT_ROOT_TOKEN=$(cat stdout | grep "^Initial Root Token" | sed -E 's/Initial Root Token: (.*)/\1/')

sleep 5

vault operator unseal -tls-skip-verify $UNSEAL_KEY

kill $!

print -nP "Waiting for second vault node to be ready... "
until kubectl logs vault-1 vault 2>/dev/null | grep -q "Log data will stream in below"
do
  sleep 5
done
print -P "%F{green}done.%F{$color}"

kubectl port-forward vault-1 8200:8200 &

sleep 10

vault operator unseal -tls-skip-verify $UNSEAL_KEY

kill $!

print -P "All vaults unsealed and ready."
print -P "%F{yellow}VAULT_TOKEN%f=%F{magenta}$VAULT_ROOT_TOKEN%F{$color}"
print -P "%F{yellow}UNSEAL_KEY%f=%F{magenta}$UNSEAL_KEY%F{$color}"

print -P "Setting up consul dns by updating kube-dns to use consul ips"
CONSUL_IPS=$(kubectl describe pods consul | grep "^IP" | sed -E 's/^.* ([0-9].+)$/"\1:8600"/'  | paste -sd "," -)
cat configmaps/kube-dns.yaml | sed "s/CONSUL_IPS/$CONSUL_IPS/" > kube-dns.yaml
kubectl apply -f kube-dns.yaml
